// Generated by gencpp from file rumba_msg/TargetPositionResponse.msg
// DO NOT EDIT!


#ifndef RUMBA_MSG_MESSAGE_TARGETPOSITIONRESPONSE_H
#define RUMBA_MSG_MESSAGE_TARGETPOSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rumba_msg
{
template <class ContainerAllocator>
struct TargetPositionResponse_
{
  typedef TargetPositionResponse_<ContainerAllocator> Type;

  TargetPositionResponse_()
    : linear_x(0.0)
    , angular_z(0.0)
    , feedback(false)
    , message()  {
    }
  TargetPositionResponse_(const ContainerAllocator& _alloc)
    : linear_x(0.0)
    , angular_z(0.0)
    , feedback(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef double _linear_x_type;
  _linear_x_type linear_x;

   typedef double _angular_z_type;
  _angular_z_type angular_z;

   typedef uint8_t _feedback_type;
  _feedback_type feedback;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TargetPositionResponse_

typedef ::rumba_msg::TargetPositionResponse_<std::allocator<void> > TargetPositionResponse;

typedef boost::shared_ptr< ::rumba_msg::TargetPositionResponse > TargetPositionResponsePtr;
typedef boost::shared_ptr< ::rumba_msg::TargetPositionResponse const> TargetPositionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rumba_msg::TargetPositionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rumba_msg::TargetPositionResponse_<ContainerAllocator1> & lhs, const ::rumba_msg::TargetPositionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.linear_x == rhs.linear_x &&
    lhs.angular_z == rhs.angular_z &&
    lhs.feedback == rhs.feedback &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rumba_msg::TargetPositionResponse_<ContainerAllocator1> & lhs, const ::rumba_msg::TargetPositionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rumba_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54e9bf1395a77a1c2acdc8f01066c0e6";
  }

  static const char* value(const ::rumba_msg::TargetPositionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54e9bf1395a77a1cULL;
  static const uint64_t static_value2 = 0x2acdc8f01066c0e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rumba_msg/TargetPositionResponse";
  }

  static const char* value(const ::rumba_msg::TargetPositionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 linear_x\n"
"float64 angular_z\n"
"bool feedback\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::rumba_msg::TargetPositionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_x);
      stream.next(m.angular_z);
      stream.next(m.feedback);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetPositionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rumba_msg::TargetPositionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rumba_msg::TargetPositionResponse_<ContainerAllocator>& v)
  {
    s << indent << "linear_x: ";
    Printer<double>::stream(s, indent + "  ", v.linear_x);
    s << indent << "angular_z: ";
    Printer<double>::stream(s, indent + "  ", v.angular_z);
    s << indent << "feedback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedback);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RUMBA_MSG_MESSAGE_TARGETPOSITIONRESPONSE_H
