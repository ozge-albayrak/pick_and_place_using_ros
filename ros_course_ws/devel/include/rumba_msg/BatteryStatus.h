// Generated by gencpp from file rumba_msg/BatteryStatus.msg
// DO NOT EDIT!


#ifndef RUMBA_MSG_MESSAGE_BATTERYSTATUS_H
#define RUMBA_MSG_MESSAGE_BATTERYSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rumba_msg
{
template <class ContainerAllocator>
struct BatteryStatus_
{
  typedef BatteryStatus_<ContainerAllocator> Type;

  BatteryStatus_()
    : percentage_battery(0)
    , location_x(0.0)
    , location_y(0.0)
    , orientation_theta(0.0)
    , brushes_up(false)
    , debug_message()  {
    }
  BatteryStatus_(const ContainerAllocator& _alloc)
    : percentage_battery(0)
    , location_x(0.0)
    , location_y(0.0)
    , orientation_theta(0.0)
    , brushes_up(false)
    , debug_message(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _percentage_battery_type;
  _percentage_battery_type percentage_battery;

   typedef double _location_x_type;
  _location_x_type location_x;

   typedef double _location_y_type;
  _location_y_type location_y;

   typedef double _orientation_theta_type;
  _orientation_theta_type orientation_theta;

   typedef uint8_t _brushes_up_type;
  _brushes_up_type brushes_up;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _debug_message_type;
  _debug_message_type debug_message;





  typedef boost::shared_ptr< ::rumba_msg::BatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rumba_msg::BatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryStatus_

typedef ::rumba_msg::BatteryStatus_<std::allocator<void> > BatteryStatus;

typedef boost::shared_ptr< ::rumba_msg::BatteryStatus > BatteryStatusPtr;
typedef boost::shared_ptr< ::rumba_msg::BatteryStatus const> BatteryStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rumba_msg::BatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rumba_msg::BatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rumba_msg::BatteryStatus_<ContainerAllocator1> & lhs, const ::rumba_msg::BatteryStatus_<ContainerAllocator2> & rhs)
{
  return lhs.percentage_battery == rhs.percentage_battery &&
    lhs.location_x == rhs.location_x &&
    lhs.location_y == rhs.location_y &&
    lhs.orientation_theta == rhs.orientation_theta &&
    lhs.brushes_up == rhs.brushes_up &&
    lhs.debug_message == rhs.debug_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rumba_msg::BatteryStatus_<ContainerAllocator1> & lhs, const ::rumba_msg::BatteryStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rumba_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rumba_msg::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rumba_msg::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rumba_msg::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8553ab09064a977637e06a24726e1227";
  }

  static const char* value(const ::rumba_msg::BatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8553ab09064a9776ULL;
  static const uint64_t static_value2 = 0x37e06a24726e1227ULL;
};

template<class ContainerAllocator>
struct DataType< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rumba_msg/BatteryStatus";
  }

  static const char* value(const ::rumba_msg::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 percentage_battery\n"
"float64 location_x\n"
"float64 location_y\n"
"float64 orientation_theta\n"
"bool brushes_up\n"
"string debug_message\n"
;
  }

  static const char* value(const ::rumba_msg::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percentage_battery);
      stream.next(m.location_x);
      stream.next(m.location_y);
      stream.next(m.orientation_theta);
      stream.next(m.brushes_up);
      stream.next(m.debug_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rumba_msg::BatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rumba_msg::BatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "percentage_battery: ";
    Printer<int64_t>::stream(s, indent + "  ", v.percentage_battery);
    s << indent << "location_x: ";
    Printer<double>::stream(s, indent + "  ", v.location_x);
    s << indent << "location_y: ";
    Printer<double>::stream(s, indent + "  ", v.location_y);
    s << indent << "orientation_theta: ";
    Printer<double>::stream(s, indent + "  ", v.orientation_theta);
    s << indent << "brushes_up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brushes_up);
    s << indent << "debug_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.debug_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RUMBA_MSG_MESSAGE_BATTERYSTATUS_H
